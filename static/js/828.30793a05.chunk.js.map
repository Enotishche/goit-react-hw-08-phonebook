{"version":3,"file":"static/js/828.30793a05.chunk.js","mappings":"iRAMMA,EAAO,CACTC,KAAM,GACNC,MAAO,GACPC,SAAU,IAGC,SAASC,IACpB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAASP,GAAjC,eAAOQ,EAAP,KAAaC,EAAb,KACQR,EAA0BO,EAA1BP,KAAMC,EAAoBM,EAApBN,MAAOC,EAAaK,EAAbL,SACfO,GAASC,EAAAA,EAAAA,UAAQ,kBAAKC,EAAAA,EAAAA,KAAL,GAAe,IAChCC,GAAUF,EAAAA,EAAAA,UAAQ,kBAAKC,EAAAA,EAAAA,KAAL,GAAe,IACjCE,GAAaH,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAErCG,EAAe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChBf,EAAgBe,EAAhBf,KAAMgB,EAAUD,EAAVC,MACdR,GAAQ,SAAAS,GAAS,yBAAUA,GAAV,cAAsBjB,EAAOgB,GAA7B,GAClB,EAEOE,EAAe,SAACC,GAClBA,EAAEC,iBAEFhB,GAAUiB,EAAAA,EAAAA,IAAQ,CAAErB,KAAAA,EAAMC,MAAAA,EAAOC,SAAAA,KACjCM,EAAQT,EACX,EAED,OACI,kBAAMuB,SAAUJ,EAAhB,WACI,iBAAKK,UAAWC,EAAAA,EAAAA,UAAhB,WACI,kBAAOC,QAAShB,EAAhB,qBACA,kBAAOc,UAAWC,EAAAA,EAAAA,MAAcE,GAAIjB,EAAQkB,SAAUb,EAClDd,KAAK,OACLgB,MAAOhB,EACP4B,KAAK,OACLC,MAAM,YACNC,YAAY,OACZC,UAAU,QAElB,4BACI,kBAAON,QAASb,EAAhB,sBACA,kBAAOW,UAAWC,EAAAA,EAAAA,MAAcE,GAAId,EAASe,SAAUb,EACnDe,MAAM,aACN7B,KAAK,QACLgB,MAAOf,EACP2B,KAAK,QACLE,YAAY,QACZC,UAAU,QAElB,4BACI,kBAAON,QAASZ,EAAhB,yBACA,kBAAOU,UAAWC,EAAAA,EAAAA,MAAcE,GAAIb,EAAYc,SAAUb,EACtDe,MAAM,gBACN7B,KAAK,WACLgB,MAAOd,EACP0B,KAAK,WACLE,YAAY,2BACZC,UAAU,QAElB,mBAAQC,QAASd,EAAcK,UAAWC,EAAAA,EAAAA,IAA1C,qBAGX,C,cChEc,SAASS,IAGpB,OACI,iBAAKV,UAAWC,EAAAA,EAAAA,UAAhB,WACI,2CACA,SAACrB,EAAD,MAGX,C,qBCXD,KAAgB,UAAY,6B,qBCA5B,KAAgB,IAAM,uBAAuB,MAAQ,yB,wDCA9C,IAkBIQ,EAAS,eAACuB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACZ,EAAIa,GAWvD,OAREb,IAFFa,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/RegisterForm/RegisterForm.jsx","Pages/RegisterPage/RegisterPage.jsx","webpack://react-homework-template/./src/Pages/LoginPage/LoginPage.module.css?3afe","webpack://react-homework-template/./src/components/LoginForm/LoginForm.module.css?4ac5","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState, useMemo } from 'react';\nimport { signup } from \"redux/Auth/auth-operations\";\nimport { nanoid } from \"nanoid\";\nimport styles from \"../LoginForm/LoginForm.module.css\";\nimport { useDispatch } from 'react-redux';\n\nconst init = {\n    name: '',\n    email: '',\n    password: ''\n};\n\nexport default function RegisterForm() {\n    const dispatch = useDispatch();\n    const [form, setForm] = useState(init);\n    const { name, email, password } = form;\n    const nameId = useMemo(()=> nanoid(), []);\n    const emailId = useMemo(()=> nanoid(), []);\n    const passwordId = useMemo(() => nanoid(), []);\n    \n    const handleChange = ({ target }) => {\n    const { name, value } = target;\n    setForm(prevState => ({ ...prevState, [name]: value }));\n  };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        \n        dispatch (signup ({ name, email, password }) );\n        setForm(init);\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className={styles.container}>\n                <label htmlFor={nameId}>Name: </label>\n                <input className={styles.input} id={nameId} onChange={handleChange}\n                    name=\"name\"\n                    value={name}\n                    type=\"text\"\n                    label=\"User name\"\n                    placeholder=\"name\"\n                    required={true} />\n            </div>\n            <div>\n                <label htmlFor={emailId}>Email: </label>\n                <input className={styles.input} id={emailId} onChange={handleChange}\n                    label=\"User email\"\n                    name=\"email\"\n                    value={email}\n                    type=\"email\"\n                    placeholder=\"email\"\n                    required={true} />\n            </div>\n            <div>\n                <label htmlFor={passwordId}>Password: </label>\n                <input className={styles.input} id={passwordId} onChange={handleChange}\n                    label=\"User password\"\n                    name=\"password\"\n                    value={password}\n                    type=\"password\"\n                    placeholder=\"password (min 6 symbols)\"\n                    required={true} />\n            </div>\n            <button onClick={handleSubmit} className={styles.btn} >Login</button>\n        </form>\n    )\n}\n","import RegisterForm from \"components/RegisterForm/RegisterForm\";\nimport styles from \"../LoginPage/LoginPage.module.css\";\n\nexport default function RegisterPage () {\n\n    \n    return (\n        <div className={styles.container}>\n            <h1>Register page</h1>\n            <RegisterForm />\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"LoginPage_container__5NdUP\"};","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"LoginForm_btn__B2KLK\",\"input\":\"LoginForm_input__aQRtt\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["init","name","email","password","RegisterForm","dispatch","useDispatch","useState","form","setForm","nameId","useMemo","nanoid","emailId","passwordId","handleChange","target","value","prevState","handleSubmit","e","preventDefault","signup","onSubmit","className","styles","htmlFor","id","onChange","type","label","placeholder","required","onClick","RegisterPage","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}